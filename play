def generate_matrix(key):
    key = key.upper().replace("J", "I")
    matrix = []
    used = set()

    for ch in key:
        if ch not in used and ch.isalpha():
            matrix.append(ch)
            used.add(ch)
    for ch in "ABCDEFGHIKLMNOPQRSTUVWXYZ":  # J is skipped
        if ch not in used:
            matrix.append(ch)
            used.add(ch)
    return [matrix[i:i+5] for i in range(0, 25, 5)]

def format_plaintext(text):
    text = text.upper().replace("J", "I").replace(" ", "")
    i = 0
    pairs = []
    while i < len(text):
        a = text[i]
        if i+1 == len(text):
            b = 'X'
            i += 1
        else:
            b = text[i+1]
            if a == b:
                b = 'X'
                i += 1
            else:
                i += 2
        pairs.append(a + b)
    return pairs

def find_position(matrix, letter):
    for r in range(5):
        for c in range(5):
            if matrix[r][c] == letter:
                return r, c

def encrypt_pair(matrix, a, b):
    r1, c1 = find_position(matrix, a)
    r2, c2 = find_position(matrix, b)
    if r1 == r2:  # same row
        return matrix[r1][(c1+1)%5] + matrix[r2][(c2+1)%5]
    elif c1 == c2:  # same column
        return matrix[(r1+1)%5][c1] + matrix[(r2+1)%5][c2]
    else:  # rectangle
        return matrix[r1][c2] + matrix[r2][c1]

def playfair_encrypt(text, key):
    matrix = generate_matrix(key)
    pairs = format_plaintext(text)
    result = ""
    for p in pairs:
        result += encrypt_pair(matrix, p[0], p[1])
    return result
